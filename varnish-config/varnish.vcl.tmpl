vcl 4.1;

import std;
import directors;

# Target backend instance
backend node {
  .host = "${GATEWAY_NODE_HOST}";
  .port = "${GATEWAY_NODE_PORT}";
  .max_connections = ${GATEWAY_NODE_MAX_CONNECTIONS};

  .probe = {
    .request =
      "HEAD ${GATEWAY_HEALTHCHECK_PATH} HTTP/1.1"
      "Host: ${GATEWAY_NODE_PROBE_HOST}"
      "Connection: close"
      "User-Agent: Varnish Health Probe";

    .interval  = 5s; 
    .timeout   = 1s;
    .window    = 5;
    .threshold = 3;
  }

  .first_byte_timeout     = 300s;   # How long to wait before we receive a first byte from our backend?
  .connect_timeout        = 5s;     # How long to wait for a backend connection?
  .between_bytes_timeout  = 2s;     # How long to wait between bytes received from our backend?
}

# Setting ACL for candidates origin who can purge
acl purge {
  "localhost";
  "127.0.0.1";
}

# Initialisation, called when VCL is loaded
sub vcl_init {
  new vdir = directors.round_robin();

  # Scale up more node backends if need be
  vdir.add_backend(node);
}

# Called at the beginning of a request, after the complete request has been
# received and parsed, after a restart or as the result of an ESI include.
# Add your config to retrieve cached content here
sub vcl_recv {
  set req.backend_hint = vdir.backend();

  # Normalize the header if it exists, remove the port (in case you're testing this on various TCP ports)
  if (req.http.Host) {
   set req.http.Host = regsub(req.http.Host, ":[0-9]+", "");
  }

  # Remove the proxy header (see https://httpoxy.org/#mitigate-varnish)
  unset req.http.proxy;

  # Normalize the query arguments
  set req.url = std.querysort(req.url);

  # For purging cache
  if (req.method == "PURGE") {
    # purge is the ACL defined at the begining
    # if not allowed to purge
    if (!client.ip ~ purge) {
      return (synth(405, "This IP is not allowed to send PURGE requests."));
    }
    # purge the cached result if authorized
    return (purge);
  }

  # Use pipe mode if not under standardised methods
  if (req.method != "GET" &&
      req.method != "HEAD" &&
      req.method != "PUT" &&
      req.method != "POST" &&
      req.method != "TRACE" &&
      req.method != "OPTIONS" &&
      req.method != "PATCH" &&
      req.method != "DELETE") {
    return (pipe);
  }

  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.Upgrade ~ "(?i)websocket") {
    return (pipe);
  }

  # Only cache GET or HEAD requests
  if (req.method != "GET" && req.method != "HEAD") {
    return (pass);
  }

  # Strip hash if it exists
  if (req.url ~ "\#") {
    set req.url = regsub(req.url, "\#.*$", "");
  }

  # Strip a trailing ? if it exists
  if (req.url ~ "\?$") {
    set req.url = regsub(req.url, "\?$", "");
  }

  # Some generic cookie manipulation, useful for all templates that follow
  # Remove the "has_js" cookie
  set req.http.Cookie = regsuball(req.http.Cookie, "has_js=[^;]+(; )?", "");

  # Remove any Google Analytics based cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__utm.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "_ga=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "_gat=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmctr=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmcmd.=[^;]+(; )?", "");
  set req.http.Cookie = regsuball(req.http.Cookie, "utmccn.=[^;]+(; )?", "");

  # Remove DoubleClick offensive cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__gads=[^;]+(; )?", "");

  # Remove the Quant Capital cookies (added by some plugin, all __qca)
  set req.http.Cookie = regsuball(req.http.Cookie, "__qc.=[^;]+(; )?", "");

  # Remove the AddThis cookies
  set req.http.Cookie = regsuball(req.http.Cookie, "__atuv.=[^;]+(; )?", "");

  # Remove a ";" prefix in the cookie if present
  set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");

  # Are there cookies left with only spaces or that are empty?
  if (req.http.cookie ~ "^\s*$") {
    unset req.http.cookie;
  }

  # Large static files are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  # Varnish 4 fully supports Streaming, so set do_stream in vcl_backend_response()
  if (req.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

  # Remove all cookies for static files
  # A valid discussion could be held on this line: do you really need to cache static files that don't cause load? Only if you have memory left.
  # Sure, there's disk I/O, but chances are your OS will already have these files in their buffers (thus memory).
  # Before you blindly enable this, have a read here: https://ma.ttias.be/stop-caching-static-files/
  if (req.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
    unset req.http.Cookie;
    return (hash);
  }

  # Send Surrogate-Capability headers to announce ESI support to backend
  set req.http.Surrogate-Capability = "key=ESI/1.0";

  # Not cacheable by default
  if (req.http.Authorization) {
    return (pass);
  }

  return (hash);
}

# Called upon entering pipe mode.
sub vcl_pipe {
  # Implementing websocket support (https://www.varnish-cache.org/docs/4.0/users-guide/vcl-example-websockets.html)
  if (req.http.upgrade) {
    set bereq.http.upgrade = req.http.upgrade;
  }

  return (pipe);
}

# Called upon entering pass mode
sub vcl_pass {
}

# vcl_hash is always visited after vcl_recv or when another subroutine returns the hash action keyword
sub vcl_hash {

  hash_data(req.url);

  if (req.http.host) {
    hash_data(req.http.host);
  } else {
    hash_data(server.ip);
  }

  # hash cookies for requests that have them
  if (req.http.Cookie) {
    hash_data(req.http.Cookie);
  }
}

# Called when a cache lookup is successful.
sub vcl_hit {
  if (obj.ttl >= 0s) {
    return (deliver);
  }

  # Use stale cache entries backend is unhealthy
  if (!std.healthy(req.backend_hint)) {
    # Return cached results in the grace period 
    if (obj.ttl + obj.grace > 0s) {
      return (deliver);
    }
  }
}

# Called after a cache lookup if the requested document was not found in the cache.
sub vcl_miss {
  return (fetch);
}

# Handle all the HTTP response coming from our backend
# Add your config to cache content here
sub vcl_backend_response {
  # Called after the response headers has been successfully retrieved from the backend.

  # Enable ESI if indicated from backend
  if (beresp.http.Surrogate-Control ~ "ESI/1.0") {
    unset beresp.http.Surrogate-Control;
    set beresp.do_esi = true;
  }

  # Enable cache for all static files
  if (bereq.url ~ "^[^?]*\.(7z|avi|bmp|bz2|css|csv|doc|docx|eot|flac|flv|gif|gz|ico|jpeg|jpg|js|less|mka|mkv|mov|mp3|mp4|mpeg|mpg|odt|otf|ogg|ogm|opus|pdf|png|ppt|pptx|rar|rtf|svg|svgz|swf|tar|tbz|tgz|ttf|txt|txz|wav|webm|webp|woff|woff2|xls|xlsx|xml|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
  }

  # Large static files are delivered directly to the end-user without
  # waiting for Varnish to fully read the file first.
  if (bereq.url ~ "^[^?]*\.(7z|avi|bz2|flac|flv|gz|mka|mkv|mov|mp3|mp4|mpeg|mpg|ogg|ogm|opus|rar|tar|tgz|tbz|txz|wav|webm|xz|zip)(\?.*)?$") {
    unset beresp.http.set-cookie;
    set beresp.do_stream = true;
  }

  # No caching, no grace - straight up
  if ((bereq.method != "GET" && bereq.method != "HEAD") || beresp.http.Set-Cookie || beresp.http.Vary == "*") {
    set beresp.grace = 0s;
    set beresp.ttl = 0s;
    set beresp.uncacheable = true;
    return (deliver);
  }

  # If response status is 5xx, and there is a background thread fetching
  # the response, do not cache the response
  if (beresp.status >= 500 && bereq.is_bgfetch) {
    return (abandon);
  }

  # Set ttl to 0 instead of default 120s, if the appropriate settings is 
  # not there
  if (!(beresp.http.Cache-Control && beresp.http.Cache-Control ~ "max-age")) {
    set beresp.ttl = 0s;
  }

  # We have filtered out all of the requests that should not be grace kept
  # Here we add the fallback grace period
  set beresp.grace = ${GATEWAY_VARNISH_GRACE_PERIOD};

  return (deliver);
}

# The routine when we deliver the HTTP request to the user
# Last chance to modify headers that are sent to the client
sub vcl_deliver {
  set resp.http.X-Cache-Hits = obj.hits;
  set resp.http.X-Cache-TTL = obj.ttl;
  set resp.http.X-Cache-Grace = obj.grace;

  # Unset common and insecure headers exposing your application versions
  unset resp.http.X-Powered-By;
  unset resp.http.Server;
  unset resp.http.X-Drupal-Cache;
  unset resp.http.X-Varnish;
  unset resp.http.Via;
  unset resp.http.Link;
  unset resp.http.X-Generator;

  return (deliver);
}

# Called after the purge has been executed
sub vcl_purge {
  if (req.method == "PURGE") {
    set req.http.X-Purge = "Yes";
    return(restart);
  }
}

# Called to deliver a synthetic object.
# A synthetic object is generated in VCL, not fetched from the backend.
sub vcl_synth {
  return (deliver);
}

# Called when VCL is discarded only after all requests have exited the VCL.
# Typically used to clean up VMODs.
sub vcl_fini {
  return (ok);
}